/*
 * Copyright 2022 akashche@redhat.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

options {
  STATIC = false;
}


PARSER_BEGIN(Parser)

package regfile.parser;

import java.util.ArrayList;

import regfile.RegFileKey;
import regfile.RegFileParseException;
import regfile.RegFileTokenException;
import regfile.RegFileValue;

public class Parser {

public ArrayList<RegFileKey> parse() throws RegFileParseException {
    try {
        return registryKeyList();
    } catch (TokenMgrError e) {
        throw RegFileParseException.fromTokenMgrError(e);
    } catch (ParseException e) {
        throw RegFileParseException.fromParseException(e);
    } catch (RegFileTokenException e) {
        throw RegFileParseException.fromTokenException(e);
    }
}

}

PARSER_END(Parser)


TOKEN : { < EOL : "\n" | "\r\n" > }
TOKEN : { < #NUMBER : ["0" - "9"] > }
TOKEN : { < HEADER : "Windows Registry Editor Version " (<NUMBER>)+ ( "." | <NUMBER> )* > }
TOKEN : { < #PRINTABLE : ( ["\u0020" - "\u007e"] | ["\u00a0" - "\ufffd"] ) > }
TOKEN : { < #PRINTABLE_NO_BACKSLASH : ( ["\u0020" - "\u005b"] | ["\u005d" - "\u007e"] | ["\u00a0" - "\ufffd"] ) > }
TOKEN : { < #HEX : ( ["0" - "9"] | ["a" - "f"] ) > }
TOKEN : { < #HEX_PAIR : ( (<HEX>){2} "," ) > }
TOKEN : { < #HEX_MULTILINE : (<HEX_PAIR>)* | ( (<HEX_PAIR>)+ "\\" <EOL> (" "){2} )* (<HEX_PAIR>)+ > }
TOKEN : { < #END_QUOTED : ( "\\" <PRINTABLE> | ~["\"", "\\", "\r", "\n"] )* "\"" > }
TOKEN : { < #QUOTED : "\"" <END_QUOTED> > }
TOKEN : { < #KEY_PART : ( <PRINTABLE_NO_BACKSLASH> )+ > }
TOKEN : { < KEY : "[" ( <KEY_PART> "\\" )* <KEY_PART> "]" > }
TOKEN : { < NAME : ( <QUOTED> | "@" ) "=" > }
TOKEN : { < TYPE : ( "\"" | "hex:" | "dword:" | "hex(b):" | "hex(7):" | "hex(2):" ) > }
TOKEN : { < VALUE_REG_SZ : <END_QUOTED> <EOL> > }
TOKEN : { < VALUE_REG_BINARY : <HEX_MULTILINE> (<HEX>){2} <EOL> > }
TOKEN : { < VALUE_REG_DWORD : (<HEX>){8} <EOL> > }
TOKEN : { < VALUE_REG_QWORD : (<HEX_PAIR>){7} <HEX> <EOL> > }
TOKEN : { < VALUE_REG_MULTI_SZ: <HEX_MULTILINE> "00" <EOL> > }
TOKEN : { < VALUE_REG_EXPAND_SZ : <HEX_MULTILINE> "00" <EOL> > }


ArrayList<RegFileKey> registryKeyList() :
{
    RegFileKey key;
    RegFileValue value;
}
{
    <HEADER><EOL>
    <EOL>
    { ArrayList<RegFileKey> keyList = new ArrayList<>(); }
    (
        key = registryKey()
        <EOL>
        (
            value = registryValue()
            { key.addValue(value); }
        )*
        <EOL>
        { keyList.add(key); }
    )*
    (<EOL>)*
    <EOF>
    { return keyList; }
}

RegFileKey registryKey():
{
    Token keyToken;
}
{
    keyToken = <KEY>
    { return RegFileKey.fromToken(keyToken); }
}

RegFileValue registryValue():
{
    Token nameToken;
    Token typeToken;
    Token valueToken;
}
{
    nameToken = <NAME>
    typeToken = <TYPE>
    (
        valueToken = <VALUE_REG_SZ>       |
        valueToken = <VALUE_REG_BINARY>   |
        valueToken = <EOL>                |
        valueToken = <VALUE_REG_DWORD>    |
        valueToken = <VALUE_REG_QWORD>    |
        valueToken = <VALUE_REG_MULTI_SZ> |
        valueToken = <VALUE_REG_EXPAND_SZ>
    )
    { return RegFileValue.fromTokens(nameToken, typeToken, valueToken); }
}
